#!/usr/bin/env bash

function readlink() {
  local _readlink="$(which readlink)"

  if ${_readlink} --version . 2>&1 | grep -q GNU; then
    ${_readlink} -f "$@"
  else
    perl -e "use Cwd qw(abs_path); print abs_path(glob('$@'));"
  fi
}

function install_dependencies() {
  echo "Installing port dependencies. Please enter sudo password when asked."
  set -ev
  sudo port -qnc install findutils coreutils gsed gawk grep htop git \
                 readline rsync curl slocate netcat tree watch wget psutils \
                 pstree pcre pinfo p7zip openssh openssl ncurses nano \
                 libxml2 libxslt libyaml libssh2 libffi keychain gzip gpgme \
                 gnutar figlet dialog dnstracer bzip2 bash augeas hub
  set +v
}

function check_dependencies() {
  if [ "$(/usr/bin/uname -s)" != "Darwin" ]; then
    echo "These init scripts are designed for OSX and won't necessarily run correctly on other systems"
    return 1
  elif [ ! -x /opt/local/bin/port ]; then
    echo "These init scripts depend on MacPorts being installed."
    read major minor patch <<< "$(sw_vers -productVersion | tr '.' ' ')"

    case $minor in 
     10) link="https://distfiles.macports.org/MacPorts/MacPorts-2.3.3-10.10-Yosemite.pkg";;
      9) link="https://distfiles.macports.org/MacPorts/MacPorts-2.2.1-10.9-Mavericks.pkg";;
      8) link="https://distfiles.macports.org/MacPorts/MacPorts-2.2.1-10.8-MountainLion.pkg";;
      7) link="https://distfiles.macports.org/MacPorts/MacPorts-2.2.1-10.7-Lion.pkg";;
      *) echo "Your mac version (${major}.${minor}) is not supported";;
    esac
    [ ! -z "${link}" ] && echo -e "You can download MacPorts from here:\n    ${link}"

    return 1
  fi

  return 0
}

function setup() {
  set -e

  check_dependencies
  install_dependencies

  local script_path="$(dirname $(readlink $0))"
  local funcpath="${script_path}/functions.d"

  local fq_initscript_path="${HOME}/.init-scripts"
  local initscripts="~/.init-scripts"

  local init_path="${initscripts}/init.sh"
  local pre_init="${initscripts}/pre-init"
  local post_init="${initscripts}/post-init"

  source ${funcpath}/00-debug.functions
  source ${funcpath}/05-string.functions
  source ${funcpath}/10-color.functions

  if [ ! -d ${fq_initscript_path} ]; then
    if [ ! -s ${fq_initscript_path} ]; then
      brightgreen "Symlinking $(cyan ${initscripts}) -> $(cyan ${script_path})"
      ln -snf "${script_path}" ${fq_initscript_path}
    fi
  fi

  if  ! grep -qe "${init_path}" "${HOME}/.bashrc"; then
    echo "$(brightgreen "adding") $(default_color "initialize script to") $(magenta "${HOME}/.bashrc")"
    echo "[ -f ${init_path} ] && source ${init_path}" >> ~/.bashrc
  fi

  if ! grep -qe "\.bashrc" "${HOME}/.bash_profile"; then
    echo "[ -f ~/.bashrc ] && source ~/.bashrc" >> ~/.bash_profile
  fi

  if [ ! -d "${HOME}/bin" ]; then
    ln -snf "${script_path}/bin" "${HOME}/bin"
  fi

  if [ ! -d "${HOME}/.bash_completion.d" ]; then
    ln -snf "${script_path}/3rdparty.d/bash_completion.d" ~/.bash_completion.d
  fi

  echo "Setup complete - please reopen your console, or type: source ~/.bashrc"
  echo "Note: the provided prompt works best with a black/gray background/foreground."
}

setup
unset setup readlink
