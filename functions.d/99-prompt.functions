if [[ -z ${CORES} ]]; then
  case "$(uname -s)" in
     Linux) CORES=$(grep -c ^processor /proc/cpuinfo) ;;
    Darwin) CORES=$(sysctl -n hw.ncpu) ;;
         *) CORES=1 ;;
  esac
  export CORES
fi

prepend_prompt_command set_last_exitcode

function jobcount() {
  [ -z "${PROMPT_IGNORE_JOBCOUNT}" ] || return
  # clear any finished job notifications before we get a count
  jobs >/dev/null
  local count=$(jobs | wc -l)
  if [ ${count} -ge 1 ]; then
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}jobs:${COLOR_BRIGHT_RED}${count}${COLOR_WHITE}]-"
  else
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}jobs:${COLOR_BRIGHT_WHITE}0${COLOR_WHITE}]-"
  fi
}

function is_git_repository { git branch &>/dev/null; }

function print_git_branch {
  local git_status="$(git status 2>/dev/null)"
  local state= remote_pattern= remote= diverge_pattern= branch=

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${COLOR_BRIGHT_GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${COLOR_YELLOW}"
  else
    state="${COLOR_BRIGHT_RED}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  fi

  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  branch=$( git symbolic-ref --short --quiet HEAD 2>&1 )
  if [ -z "${branch}" ]; then
    hash="$(git rev-parse HEAD)"
    name=$(git name-rev --name-only ${hash})
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}detached:${state}${name} (${hash:0:7})${COLOR_WHITE}${COLOR_YELLOW}${remote}${COLOR_WHITE}]-"
  else
    # Set the final branch string.
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}branch:${state}${branch}${COLOR_WHITE}${COLOR_YELLOW}${remote}${COLOR_WHITE}]-"
  fi
}

function current_git_branch() {
  [ -z "${PROMPT_IGNORE_GIT}" ] || return
  is_git_repository && print_git_branch
}

function load_color() {
  local num="$@"
  if [ $(echo "scale=10; ${num} / ${CORES} >= 1.5" | bc) -eq 1 ]; then
    brightred ${num}
  elif [ $(echo "scale=10; ${num} / ${CORES} >= 0.8" | bc) -eq 1 ]; then
    brightyellow ${num}
  else
    brightgreen ${num}
  fi
}

function load() {
  [ -z "${PROMPT_IGNORE_LOAD}" ] || return
  local five= ten= fifteen=
  read five ten fifteen <<< $(uptime | perl -p -e 's|^.*load averages?: ||g' | tr -d ',')
  echo -en "${COLOR_WHITE}-[${COLOR_CYAN}load:$(load_color ${five}) $(load_color ${ten}) $(load_color ${fifteen})${COLOR_WHITE}]-"
}

function lec() {
  [ -z "${PROMPT_IGNORE_LEC}" ] || return
  local status=${LEC}
  status=${status:=0}
  if [ $status -ge 1 ]; then
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}last_exit_code:${COLOR_BRIGHT_RED}${status}${COLOR_WHITE}]-"
  elif [ $status -lt 0 ]; then
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}last_exit_code:${COLOR_BRIGHT_YELLOW}${status}${COLOR_WHITE}]-"
  else
    echo -en "${COLOR_WHITE}-[${COLOR_CYAN}last_exit_code:${COLOR_BRIGHT_GREEN}${status}${COLOR_WHITE}]-"
  fi
}

function set_last_exitcode() { export LEC=$?; }

function rubyversion() {
  [ -z "${PROMPT_IGNORE_RUBY}" ] || return
  hash -d ruby &>/dev/null
  type ruby &>/dev/null

  local prog= ver= other=
  read prog ver other <<< $(ruby -v)
  echo -en "${COLOR_WHITE}-[${COLOR_CYAN}rv:${COLOR_BRIGHT_GREEN}${ver}${COLOR_WHITE}]-"
}

function extras_line() {
  local extras=( "$(jobcount)" "$(lec)" "$(load)" "$(rubyversion)" "$(current_git_branch)" )
  for ((i = 0; i < ${#extras[@]}; i++)); do
    [ ! -z "${extras[$i]}" ] && echo -en "${extras[$i]} "
  done
}

function main_line() {
  local TTY=$(tty | perl -p -e 's|/dev/||g')
  local user="$(whoami)"
  local host="$(hostname -f)"
  local user_host=

  if [ "$(whoami)" = 'root' ]; then
    user="$(toupper ${user})"
    host="$(toupper ${host})"
    user_host="\n${TITLEBAR}${COLOR_WHITE}-[${COLOR_BRIGHT_RED}${USER}${COLOR_YELLOW}@${COLOR_BRIGHT_BLUE}${host}${COLOR_WHITE}]- "
  else
    user_host="\n${TITLEBAR}${COLOR_WHITE}-[${COLOR_YELLOW}${USER}${COLOR_WHITE}@${COLOR_BRIGHT_BLUE}${host}${COLOR_WHITE}]- "
  fi

  echo -en "${user_host}-[${COLOR_BRIGHT_BLUE}$(date)${COLOR_WHITE}]- -[${COLOR_BRIGHT_BLACK}${TTY}${COLOR_WHITE}]-"
}

function path_line() {
  printf "${COLOR_WHITE}-[${COLOR_CYAN}%s${COLOR_WHITE}]-" ${PWD/${HOME}/\~}
}

function prompt_lines() {
  [ -z "${PROMPT_IGNORE_MAIN}" ]   && echo -e "$(main_line)"
  [ -z "${PROMPT_IGNORE_EXTRAS}" ] && echo -e "$(extras_line)"
  [ -z "${PROMPT_IGNORE_PATH}" ]   && echo -e "$(path_line)"
}

function prompt() {
  export PS1="\$(prompt_lines)"
  export PS1="${PS1}\n\[${COLOR_YELLOW}\]\$\[${COLOR_NORMAL}\] "
  export PS2="${COLOR_BRIGHT_CYAN}-${COLOR_CYAN}-${COLOR_BRIGHT_BLACK}-${COLOR_NORMAL} "
}
