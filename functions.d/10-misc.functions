function ask() {
  local prompt="$*" response=
  prompt="${prompt:-continue?}"

  until [[ ${response} =~ [yn] ]]; do
    read -p "${prompt} [y/n] " response
  done

  [[ ${response} =~ n ]] && return 1 || return 0
}

function revwords() {
  if [ -t 0 ]; then
    [ $# -eq 0 ] && return

    words=( $@ )

    for (( i = ${#words[@]} - 1; i >= 0; i--)) {
      echo -n ${words[$i]}
      [ $i -gt 0 ] && echo -n ' '
    }
    echo
  else
    while read -r line; do
      words=( ${line} )
      for (( i = ${#words[@]} - 1; i >= 0; i--)) {
        echo -n ${words[$i]}
        [ $i -gt 0 ] && echo -n ' '
      }
      echo
    done
  fi
}

function sort_domains() {
  if [ -t 0 ]; then
    [ $# -eq 0 ] && return
    echo $@ | tr ' ' '\n' | tr '.' ' ' | revwords | sort | revwords | tr ' ' '.' | tr '\n' ' '
  else 
    cat | tr '.' ' ' | revwords | sort | revwords | tr ' ' '.'
  fi
}

function commafy() {
  for arg in ${@}; do
    echo ${arg} | perl -p -e 's/(\d)(?=(\d{3})+(\D|$))/$1\,/g'
  done
}

function check_certificate_key() {
  local key=$1 cert=$2
  if [ -z "${key}" -o ! -r "${key}" -o $(grep -c -- "PRIVATE KEY-----" "${key}") -eq 0 ]; then
    brighred "argument 1 must be a valid path to a key file\n"
    return 1
  elif [ -z "${cert}" -o ! -r "${cert}" -o $(grep -c -- "-----BEGIN CERTIFICATE-----" "${cert}") -eq 0 ]; then
    brightred "argument 2 must be a valid path to a certificate file\n"
    return 1
  fi

  cert_hash="$(openssl x509 -noout -modulus -in "${cert}" | openssl md5)"
  key_hash="$(openssl rsa -noout -modulus -in "${key}" | openssl md5)"
  if [ "${cert_hash}" = "${key_hash}" ]; then
    brightgreen "Certificate was generated using the given key\n"
    return 0
  else
    brightred "Certificate/Key mismatch.\n"
    return 1
  fi
}

function get_ssh_key_files() {
  local list=
  for keyfile in $(/usr/bin/egrep -c 'BEGIN.+PRIVATE KEY' ~/.ssh/* | grep :1 | cut -d: -f1); do
    ssh-keygen -l -f ${keyfile}.pub &>/dev/null && list="${list} $(basename ${keyfile})"
  done
  echo $list
}

function load_public_key_agent() {
	local keys="$*"
  which -s keychain || return 0
  [[ $SSH_AUTH_SOCK =~ launchd ]] && unset SSH_AUTH_SOCK
  [ -r "${HOME}/.keychain/keydata-sh" ] && source "${HOME}/.keychain/keydata-sh"
  if [ ! -S ${SSH_AUTH_SOCK} ] || ! ps ${SSH_AGENT_PID} >&-; then
    [ ! -S "${SSH_AUTH_SOCK}" ] && echo "auth sock file [${SSH_AUTH_SOCK}] not found, or not a socket - regenerating"
    ! ps ${SSH_AGENT_PID} >&- && echo "SSH agent process [${SSH_AGENT_PID}] not alive - regenerating"
  fi
  eval $(keychain --quiet --eval --agents ssh --inherit any --host keydata $(get_ssh_key_files))
}

function encrypt_password() {
  python -c 'import crypt, getpass; print(crypt.crypt(getpass.getpass("Password: "), "'$(mksalt)'"))'
}

function generate_password() {
  local charspool=(
    'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p'
    'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '0' '1' '2' '3' '4' '5' '6' '7'
    '8' '9' '0' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O'
    'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '=' '.' ',' '-' '_'
  );

  local len=${#charspool[*]}

  if [ $# -lt 1 ]; then
    local num=16;
  else
    local num=$1;
  fi

  local password=""
  for (( i = 0; i < $num; i++ )); do
    password="${password}${charspool[$((RANDOM % len))]}"
  done

  [[ -t 1 ]] && lightcyan "${password}\n" || echo "${password}"
}

function mksalt() {
  local charspool=(
    'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p'
    'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '1' '2' '3' '4' '5' '6' '7'
    '8' '9' '0' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 
    'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '.' '/'
  );

  local len=${#charspool[*]}
  num=16;

  local salt=""
  for (( i = 0; i < $num; i++ )); do
    salt="${salt}${charspool[$((RANDOM % len))]}"
  done

  printf "\$6\$${salt}"
}


function get_file_from_url() {
  if [ $# -lt 1 -o $# -gt 2 ]; then
    echo "Usage: get_file_from_url url [filename]"
    echo
    echo "       url      - (required) url to retrieve"
    echo "       filename - (optional) optional filename to store url as"
    echo
    echo "If file is not specified, name will be drawn from the url itself."
    return 1
  fi
 
  local url="$1" file="$2"
  
  if [ -z "${file}" ]; then
    file="${url%\?*}"
    file="${file##*/}"
  fi

  if [ -e "${file}" ]; then
    counter=1
    until [ ! -e "${file}.${counter}" ]; do
      counter=$((counter + 1))
    done
    file="${file}.${counter}"
  fi

  echo "Storing ${url} as ${file}"
  echo curl -s "$url" > ${file}
  curl -s "$url" > ${file}
}

function dug() {
  if [ $# -gt 1 ]; then
    echo "Usage: dug <path>"
    return 1
  elif [ $# -eq 1 ]; then
    path="$1"
  else
    path="."
  fi

  du -h --max-depth=1 "${path}" | grep -iP '^\d+(\.\d+)?g'
}

function dum() {
  if [ $# -gt 1 ]; then
    echo "Usage: dum <path>"
    return 1
  elif [ $# -eq 1 ]; then
    path="$1"
  else
    path="."
  fi

  du -h --max-depth=1 "${path}" | grep -iP '^\d+(\.\d+)?m'
}

truncate_and_edit ()
{
    [[ $# -ne 1 ]] && {
        echo 'no file to truncate/edit!' 1>&2;
        return 1
    };
    [[ ! -e "$1" ]] && {
        echo 'file does not exist!' 1>&2;
        return 1
    };
    [[ ! -f "$1" ]] && {
        echo 'not a file!' 1>&2;
        return 1
    };
    [[ ! -w "$1" ]] && {
        echo 'file not writable by you!' 1>&2;
        return 1
    };
    truncate -s0 "$1";
    ${EDITOR:-nano} "$1"
}
